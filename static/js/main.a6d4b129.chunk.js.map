{"version":3,"sources":["redux/contacts-actions.js","FormAddContacts/FormAddContacts.js","Contacts/Contacts.js","Filter/Filter.js","Phonebook/Phonebook.js","App.js","redux/contacts-reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","FormAddContacts","onSubmit","useState","setName","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleChange","event","target","value","reset","preventDefault","alreadyAddedContact","find","contact","alert","formSubmitHandler","className","type","pattern","title","required","onChange","Contacts","toLowerCase","filter","showContacts","includes","map","onClick","Filter","handleFilter","length","currentTarget","Phonebook","App","itemReducer","createReducer","action","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"iVAGMA,EAAaC,YAAa,gBAAgB,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,OAAR,MAAqB,CACjEC,QAAS,CACLC,GAAIC,cACJJ,OACAC,cAGFI,EAAgBN,YAAa,mBAC7BO,EAAeP,YAAa,mB,eCNnB,SAASQ,EAAT,GAAuC,EAAZC,SAAa,IACnD,EAAwBC,mBAAS,IAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOR,EAAP,KAAeU,EAAf,KAEMC,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,SAC/CC,EAAWC,cAYXC,EAAe,SAAAC,GACjB,MAAwBA,EAAMC,OAAtBpB,EAAR,EAAQA,KAAMqB,EAAd,EAAcA,MAEd,OAAQrB,GACJ,IAAK,OACDU,EAAQW,GACR,MAEJ,IAAK,SACDV,EAAUU,GACV,MAEJ,QACI,SAWNC,EAAQ,WACXZ,EAAQ,IACRC,EAAU,KAGT,OACI,sBAAMH,SAbO,SAAAW,GACjBA,EAAMI,iBA5BgB,SAAEvB,EAAMC,GAC9B,IAAMuB,EAAsBZ,EAASa,MAAK,SAAAC,GAAO,OAAIA,EAAQ1B,OAASA,KAClEwB,EACAG,MAAM,GAAD,OAAIH,EAAoBxB,KAAxB,4BAITgB,EAASlB,EAAW,CAAEE,OAAMC,YAuB5B2B,CAAkB5B,EAAMC,GACxBqB,KASI,SACE,sBAAKO,UAAU,aAAf,UACE,yCACQ,uBACJA,UAAU,YACVC,KAAK,OACL9B,KAAK,OACL+B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRZ,MAAOrB,EACPkC,SAAUhB,OAGd,2CACU,uBACNW,UAAU,YACVC,KAAK,MACL9B,KAAK,SACL+B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRZ,MAAOpB,EACPiC,SAAUhB,OAId,wBAAQW,UAAU,UAAUC,KAAK,SAAjC,8B,UC/CDK,EA3BE,WACb,IAAMvB,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,SAC/CC,EAAWC,cAGXmB,EAFSvB,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASyB,UAExBD,cACrBE,EAAe1B,EAASyB,QAAO,SAAAX,GAAO,OACvCA,EAAQ1B,KAAKoC,cAAcG,SAASH,MAOzC,OAAOxB,GACH,6BACK0B,EAAaE,KAAI,gBAAGrC,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACd,qBAAa4B,UAAU,iBAAvB,UACI,oBAAGA,UAAU,iBAAb,UAA+B7B,EAA/B,KAAuCC,KACvC,wBAAQwC,QAAS,WAR7BzB,EAASX,EAQ0CF,KAAvC,sBAFKA,SCgBVuC,G,MAjCA,WACX,IAAM9B,EAAWC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,SAC/CsB,EAASxB,aAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASyB,UAC7CrB,EAAWC,cAQjB,IAAM0B,EAAe,SAAAtB,GACjBL,EAASV,EAAae,KAG1B,OAA2B,IAApBT,EAASgC,OACZ,8BACA,0DACyB,uBACrBf,UAAU,eACVC,KAAK,OACL9B,KAAK,SACLqB,MAAOgB,EACPH,SAjBR,SAA0Bf,GACtB,IAAQE,EAAUF,EAAM0B,cAAhBxB,MACRsB,EAAatB,WAqBb,yE,MChBOyB,I,EAAAA,EAbf,WAEI,OACI,sBAAKjB,UAAU,YAAf,UACI,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,QCHGkB,EARH,WACV,OAEI,cAAC,EAAD,K,+DCDAC,EAAcC,YAAc,IAAD,mBAC5BnD,GAAa,SAACgB,EAAOoC,GAAR,4BAAuBpC,GAAvB,CAA8BoC,EAAOhD,aADtB,cAE5BG,GAAgB,SAACS,EAAOoC,GAAR,OAAmBpC,EAAMuB,QAAO,SAAAX,GAAO,OAAIA,EAAQvB,KAAO+C,EAAOhD,cAFrD,IAK3BiD,EAAgBF,YAAc,GAAD,eAC9B3C,GAAe,SAAC8C,EAAGF,GAAJ,OAAeA,EAAOhD,YAG3BmD,cAAgB,CAC3BtC,MAAOiC,EACPX,OAAQc,ICANG,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGDC,EAAQC,YAAe,CAClCC,QAAS,CACP3D,SAAU4D,YAAeP,EAAuBQ,IAElDnB,aACAoB,UAAUC,IAGCC,EAAYC,YAAaR,GC9BtCS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,IAAD,CAAaY,QAAS,KAAML,UAAWA,EAAvC,SACE,cAAC,EAAD,UAINM,SAASC,eAAe,W","file":"static/js/main.a6d4b129.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', ({name, number}) => ({\r\n    payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number,\r\n    },\r\n}));\r\nconst deleteContact = createAction('contacts/delete')\r\nconst changeFilter = createAction('contacts/filter')\r\n\r\nexport { addContact, deleteContact, changeFilter };\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addContact } from '../redux/contacts-actions';\r\nimport './FormAddContacts.css';\r\n\r\nexport default function FormAddContacts({ onSubmit }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n\r\n    const contacts = useSelector(state => state.contacts.items);\r\n    const dispatch = useDispatch();\r\n\r\n    const formSubmitHandler = ( name, number ) => {\r\n        const alreadyAddedContact = contacts.find(contact => contact.name === name);\r\n        if (alreadyAddedContact) {\r\n            alert(`${alreadyAddedContact.name} is already in contacts`);\r\n            return;\r\n        }\r\n\r\n        dispatch(addContact({ name, number }));\r\n    };\r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        formSubmitHandler(name, number);\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n       setName('');\r\n       setNumber('');\r\n    };\r\n\r\n        return (\r\n            <form onSubmit={handleSubmit}>\r\n              <div className=\"input-form\">\r\n                <label>\r\n                    Name<input\r\n                    className=\"add-input\"\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                    title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                    required\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                /> \r\n                </label>\r\n                <label>\r\n                    Number<input\r\n                    className=\"add-input\"\r\n                    type=\"tel\"\r\n                    name=\"number\"\r\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                    title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                    required\r\n                    value={number}\r\n                    onChange={handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button className=\"btn-add\" type=\"submit\">Add contact</button>\r\n            </div>  \r\n            </form>\r\n        );\r\n};","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { deleteContact } from '../redux/contacts-actions';\r\nimport './Contacts.css';\r\n\r\nconst Contacts = () => {\r\n    const contacts = useSelector(state => state.contacts.items);\r\n    const dispatch = useDispatch();\r\n    const filter = useSelector(state => state.contacts.filter);\r\n\r\n    const toLowerCase = filter.toLowerCase();\r\n    const showContacts = contacts.filter(contact =>\r\n         contact.name.toLowerCase().includes(toLowerCase)\r\n    );\r\n\r\n    const onDeleteContact = (contactId) => {\r\n        dispatch(deleteContact(contactId))\r\n    };\r\n\r\n    return contacts && (\r\n        <ul>\r\n            {showContacts.map(({ id, name, number }) => (\r\n                <li key={id} className=\"contacts__item\">\r\n                    <p className=\"contacts__text\">{name}: {number}</p>\r\n                    <button onClick={() => onDeleteContact(id)}>delete</button>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    )\r\n    \r\n};\r\n\r\nexport default Contacts;","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter } from '../redux/contacts-actions';\r\nimport './Filter.css';\r\n\r\nconst Filter = () => {\r\n    const contacts = useSelector(state => state.contacts.items);\r\n    const filter = useSelector(state => state.contacts.filter);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    function getFilteredName (event) {\r\n        const { value } = event.currentTarget;\r\n        handleFilter(value);\r\n    }\r\n\r\n    const handleFilter = value => {\r\n        dispatch(changeFilter(value))\r\n    };\r\n\r\n    return contacts.length !== 0 ? (\r\n        <div>\r\n        <label>\r\n            Find contacts by Name<input\r\n            className=\"filter-input\"\r\n            type=\"text\"\r\n            name=\"filter\"\r\n            value={filter}\r\n            onChange={getFilteredName}\r\n        />\r\n        </label>\r\n        \r\n        </div>\r\n        ) : (\r\n        <p>There is no contacts in your Phonebook</p>\r\n    )\r\n};\r\n\r\nexport default Filter;","import FormAddContacts from '../FormAddContacts/FormAddContacts';\r\nimport Contacts from '../Contacts/Contacts';\r\nimport Filter from '../Filter/Filter';\r\nimport './Phonebook.css';\r\n\r\nfunction Phonebook() {\r\n\r\n    return (\r\n        <div className=\"phonebook\">\r\n            <h1>Phonebook</h1>\r\n            <FormAddContacts />\r\n            <h2>Contacts</h2>\r\n            <Filter />\r\n            <Contacts />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Phonebook;","import Phonebook from './Phonebook/Phonebook'\n\nconst App = () => {\n  return (\n  \n      <Phonebook />\n    \n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, changeFilter } from './contacts-actions';\r\n\r\nconst itemReducer = createReducer([], {\r\n    [addContact]: (state, action) => [...state, action.payload],\r\n    [deleteContact]: (state, action) => state.filter(contact => contact.id !== action.payload),\r\n});\r\n\r\nconst filterReducer = createReducer('', {\r\n    [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items: itemReducer,\r\n    filter: filterReducer,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport logger from 'redux-logger';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport const persistor = persistStore(store);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}